{"remainingRequest":"/Users/Kai/Documents/BYU W2021/CS 260/CP3/cp3/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Kai/Documents/BYU W2021/CS 260/CP3/cp3/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Kai/Documents/BYU W2021/CS 260/CP3/cp3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Kai/Documents/BYU W2021/CS 260/CP3/cp3/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/Kai/Documents/BYU W2021/CS 260/CP3/cp3/src/App.vue","mtime":1617921461752},{"path":"/Users/Kai/Documents/BYU W2021/CS 260/CP3/cp3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Kai/Documents/BYU W2021/CS 260/CP3/cp3/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Kai/Documents/BYU W2021/CS 260/CP3/cp3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Kai/Documents/BYU W2021/CS 260/CP3/cp3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}